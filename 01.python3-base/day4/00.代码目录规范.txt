

Foo/                      # 项目名称
|-- bin/                  # 项目程序
|   |-- foo               # 启动程序
|
|-- conf/                 # 配置文件
|   |-- __init__.py
|   |-- setting.py        # 配置文件
|-- foo/
|   |-- tests/            # 测试用例
|   |   |-- __init__.py   # 调用包模块
|   |   |-- test_main.py  # 测试用例程序
|   |
|   |-- __init__.py       # 调用包模块
|   |-- main.py           # 程序主路口
|
|-- docs/                 # 帮助文档
|   |-- conf.py           # 配置文件
|   |-- abc.rst
|
|-- setup.py              # 安装部署文档
|-- requirements.txt      # 依赖关系
|-- README                # 文档说明

bin/: 存放项目的一些可执行文件，当然你可以起名script/之类的也行。
foo/: 存放项目的所有源代码。(1) 源代码中的所有模块、包都应该放在此目录。不要置于顶层目录。(2) 其子目录tests/存放单元测试代码； (3) 程序的入口最好命名为main.py。
docs/: 存放一些文档。
setup.py: 安装、部署、打包的脚本。
requirements.txt: 存放软件依赖的外部Python包列表。
README: 项目说明文件。

关于README的内容

简要描述该项目的信息，让读者快速了解这个项目。
它需要说明以下几个事项:
1.软件定位，软件的基本功能。
2.运行代码的方法: 安装环境、启动命令等。
3.简要的使用说明。
4.代码目录结构说明，更详细点可以说明软件的基本原理。
5.常见问题说明。

requirements.txt
这个文件存在的目的是:
方便开发者维护软件的包依赖。将开发过程中新增的包添加进这个列表中，避免在setup.py安装依赖时漏掉软件包。
方便读者明确项目使用了哪些Python包。
这个文件的格式是每一行包含一个包依赖的说明，通常是flask>=0.10这种格式，要求是这个格式能被pip识别，这样就可以简单的通过 pip install -r requirements.txt来把所有Python包依赖都装好了。